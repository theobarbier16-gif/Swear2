// Utility for processing images with N8N webhook
import { ClothingOptions } from '../App';

// Configuration des proxies CORS
const CORS_PROXIES = [
  'https://cors-anywhere.herokuapp.com/',
  'https://api.allorigins.win/raw?url=',
  'https://corsproxy.io/?',
];

// Variable globale pour la fonction d'ajout de logs
let addDebugLogFunction: ((message: string) => void) | null = null;

export const setDebugLogger = (logFunction: (message: string) => void) => {
  addDebugLogFunction = logFunction;
};

const debugLog = (message: string) => {
  const timestamp = new Date().toLocaleTimeString();
  const logMessage = `[${timestamp}] ${message}`;
  console.log(logMessage);
  if (addDebugLogFunction) {
    addDebugLogFunction(logMessage);
  }
};

export interface WebhookResponse {
  success: boolean;
  imageUrl?: string;
  error?: string;
}

export const processImageWithN8N = async (file: File, options: ClothingOptions): Promise<WebhookResponse> => {
  debugLog('üöÄ D√©but du traitement d\'image');
  
  try {
    // Validation du fichier
    debugLog('üîç Validation du fichier...');
    if (!file || file.size === 0) {
      debugLog('‚ùå Fichier invalide ou vide');
      throw new Error('Fichier invalide ou vide');
    }
    
    if (file.size > 25 * 1024 * 1024) { // 25MB max pour mobile
      debugLog(`‚ùå Fichier trop volumineux: ${file.size} bytes`);
      throw new Error('Fichier trop volumineux (max 25MB)');
    }
    
    // Log d√©taill√© de la taille
    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
    debugLog(`üìè Taille du fichier: ${file.size} bytes (${sizeInMB} MB)`);
    
    if (!file.type.startsWith('image/')) {
      debugLog(`‚ùå Type de fichier invalide: ${file.type}`);
      throw new Error('Le fichier doit √™tre une image');
    }
    
    debugLog(`‚úÖ Fichier valid√©: ${file.name} (${file.size} bytes, ${file.type})`);
    
    // Convert file to base64
    debugLog('üîÑ D√©but conversion base64...');
    let base64;
    try {
      base64 = await fileToBase64(file);
      const base64SizeKB = (base64.length * 0.75 / 1024).toFixed(2); // Approximation taille base64
      debugLog(`‚úÖ Conversion r√©ussie: ${base64.length} caract√®res (~${base64SizeKB} KB)`);
    } catch (error) {
      debugLog(`‚ùå Erreur conversion: ${error}`);
      throw new Error('Impossible de traiter l\'image');
    }
    
    if (!base64 || base64.length === 0) {
      debugLog('‚ùå Base64 vide apr√®s conversion');
      throw new Error('√âchec de la conversion de l\'image');
    }
    
    debugLog(`üöÄ Envoi vers webhook: ${options.gender} ${options.size.toUpperCase()}`);
    
    // Pr√©parer le payload
    debugLog('üì¶ Pr√©paration du payload...');
    const payload = {
      image: base64,
      gender: options.gender,
      size: options.size,
      mirror: options.mirror === 'mirror' ? 'photo dans le miroir' : options.mirror
    };
    
    const payloadSize = JSON.stringify(payload).length;
    const payloadSizeMB = (payloadSize / (1024 * 1024)).toFixed(2);
    debugLog(`üì¶ Payload: ${payloadSize} caract√®res (${payloadSizeMB} MB)`);
    
    // V√©rifier si le payload n'est pas trop gros
    if (payloadSize > 100 * 1024 * 1024) { // 100MB limit pour le payload JSON
      debugLog('‚ùå Payload trop volumineux pour l\'envoi');
      throw new Error('Image trop complexe √† traiter. Essayez avec une image plus simple.');
    }
    
    // Test de connectivit√© avant l'envoi principal
    debugLog('üîç Test de connectivit√© vers le serveur...');
    try {
      // Test avec une requ√™te OPTIONS pour v√©rifier CORS
      const testResponse = await fetch('https://n8n-automatisation.fr/webhook-test/testvolt', {
        method: 'OPTIONS',
        headers: {
          'Accept': '*/*',
          'Access-Control-Request-Method': 'POST',
          'Access-Control-Request-Headers': 'Content-Type',
          'Origin': window.location.origin,
        },
      });
      debugLog(`‚úÖ Test CORS: ${testResponse.status} ${testResponse.statusText}`);
      
      // V√©rifier les headers CORS
      const corsHeaders = {
        'Access-Control-Allow-Origin': testResponse.headers.get('Access-Control-Allow-Origin'),
        'Access-Control-Allow-Methods': testResponse.headers.get('Access-Control-Allow-Methods'),
        'Access-Control-Allow-Headers': testResponse.headers.get('Access-Control-Allow-Headers'),
      };
      debugLog(`üîç Headers CORS: ${JSON.stringify(corsHeaders)}`);
      
    } catch (testError) {
      debugLog(`‚ö†Ô∏è Test CORS √©chou√©: ${testError}`);
      // Continuer quand m√™me, parfois OPTIONS n'est pas support√©
    }
    
    // Essayer plusieurs URLs de fallback
    const webhookUrls = [
      'https://n8n-automatisation.fr/webhook-test/testvolt',
      'https://n8n-automatisation.fr/webhook/testvolt',
      // Essayer avec des proxies CORS
      ...CORS_PROXIES.map(proxy => `${proxy}https://n8n-automatisation.fr/webhook-test/testvolt`),
      // HTTP fallback en dernier recours
      'http://n8n-automatisation.fr/webhook-test/testvolt',
    ];
    
    let response;
    const maxRetries = 3; // Plus de tentatives pour mobile
    let lastError;
    let successUrl = null;
    
    // Essayer chaque URL
    for (const webhookUrl of webhookUrls) {
      debugLog(`üåê Test de l'URL: ${webhookUrl}`);
      
      for (let attempt = 0; attempt <= maxRetries; attempt++) {
        try {
          debugLog(`üîÑ Tentative ${attempt + 1}/${maxRetries + 1} pour ${webhookUrl}`);
          
          const controller = new AbortController();
          const timeoutDuration = 45000; // 45s timeout pour mobile
          const timeoutId = setTimeout(() => {
            debugLog('‚è∞ Timeout - annulation de la requ√™te');
            controller.abort();
          }, timeoutDuration);
          
          debugLog(`üì° Envoi de la requ√™te... (${payloadSizeMB} MB)`);
          
          // Log du d√©but de l'envoi
          const startTime = Date.now();
          
          // Headers optimis√©s pour mobile et CORS
          const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json, */*',
            'X-Requested-With': 'XMLHttpRequest',
          };
          
          // Headers conditionnels selon l'URL
          if (webhookUrl.startsWith('https://n8n-automatisation.fr')) {
            headers['Origin'] = window.location.origin;
            headers['Cache-Control'] = 'no-cache';
            headers['Pragma'] = 'no-cache';
          } else if (webhookUrl.includes('cors-anywhere') || webhookUrl.includes('allorigins') || webhookUrl.includes('corsproxy')) {
            // Pour les proxies CORS, headers simplifi√©s
            delete headers['X-Requested-With'];
          }
          
          debugLog(`üìã Headers envoy√©s: ${JSON.stringify(headers)}`);
          
          response = await fetch(webhookUrl, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(payload),
            signal: controller.signal,
            mode: webhookUrl.includes('cors-anywhere') || webhookUrl.includes('allorigins') || webhookUrl.includes('corsproxy') ? 'cors' : 'no-cors',
            credentials: 'omit',
          });
          
          clearTimeout(timeoutId);
          const endTime = Date.now();
          const duration = endTime - startTime;
          debugLog(`‚úÖ Requ√™te envoy√©e en ${duration}ms`);
          debugLog(`üì° Statut re√ßu: ${response.status} ${response.statusText}`);
          
          // Log des headers de r√©ponse
          const responseHeaders = {};
          response.headers.forEach((value, key) => {
            responseHeaders[key] = value;
          });
          debugLog(`üìã Headers r√©ponse: ${JSON.stringify(responseHeaders)}`);
          
          successUrl = webhookUrl;
          break; // Succ√®s, sortir de la boucle
          
        } catch (error) {
          lastError = error;
          debugLog(`‚ùå Tentative ${attempt + 1} √©chou√©e pour ${webhookUrl}: ${error instanceof Error ? error.message : String(error)}`);
          
          // Log d√©taill√© de l'erreur
          if (error instanceof Error) {
            debugLog(`üîç Type d'erreur: ${error.name}`);
            debugLog(`üîç Message: ${error.message}`);
            
            // Diagnostics sp√©cifiques
            if (error.message.includes('Load failed')) {
              debugLog('üåê Erreur "Load failed" - Essai avec proxy CORS...');
            } else if (error.message.includes('NetworkError')) {
              debugLog('üì° Erreur r√©seau - V√©rifiez votre connexion');
            } else if (error.message.includes('CORS')) {
              debugLog('üö´ Erreur CORS - Tentative avec proxy...');
            } else if (error.message.includes('Failed to fetch')) {
              debugLog('üì° Failed to fetch - Tentative avec m√©thode alternative...');
            }
          }
          
          if (attempt === maxRetries) {
            debugLog(`‚ùå Toutes les tentatives ont √©chou√© pour ${webhookUrl}`);
          } else {
            // Attendre avant de r√©essayer
            const waitTime = 1000 * (attempt + 1);
            debugLog(`‚è≥ Attente de ${waitTime}ms avant retry...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
          }
        }
      }
      
      // Si on a une r√©ponse, sortir de la boucle des URLs
      if (response) {
        debugLog(`‚úÖ Succ√®s avec l'URL: ${successUrl}`);
        break;
      }
    }
    
    if (!response) {
      debugLog('‚ùå Aucune r√©ponse re√ßue de toutes les URLs');
      
      // Essayer une derni√®re m√©thode : simulation locale pour test
      debugLog('üîÑ Tentative de simulation locale pour test...');
      return await simulateProcessing();
    }

    debugLog(`üì° Analyse de la r√©ponse: ${response.status} ${response.statusText}`);
    
    if (!response.ok) {
      const errorText = await response.text().catch(() => 'Erreur inconnue');
      debugLog(`‚ùå Erreur serveur (${response.status}): ${errorText}`);
      throw new Error(`Erreur serveur (${response.status}): ${errorText}`);
    }

    // V√©rifier le type de contenu de la r√©ponse
    const contentType = response.headers.get('content-type');
    debugLog(`üé≠ Type de contenu: ${contentType}`);
    
    // Cloner la r√©ponse pour pouvoir la lire plusieurs fois
    const responseClone = response.clone();
    
    // Gestion robuste de la r√©ponse
    try {
      const textContent = await responseClone.text();
      debugLog(`üìù R√©ponse re√ßue (${textContent.length} caract√®res)`);
      
      if (textContent.length === 0) {
        debugLog('‚ùå R√©ponse vide du serveur');
        throw new Error('R√©ponse vide du serveur');
      }
      
      // V√©rifier si c'est du JSON
      if (contentType?.includes('application/json')) {
        debugLog('üîç Parsing JSON...');
        const jsonData = JSON.parse(textContent);
        debugLog('üìä Donn√©es JSON re√ßues');
        
        // Si le JSON contient une image en base64
        if (jsonData.image || jsonData.imageUrl || jsonData.result) {
          debugLog('üñºÔ∏è Image trouv√©e dans la r√©ponse');
          // Traiter selon le format JSON re√ßu
          const imageData = jsonData.image || jsonData.imageUrl || jsonData.result;
          
          if (typeof imageData === 'string') {
            // Si c'est une URL
            if (imageData.startsWith('http')) {
              debugLog('‚úÖ URL d\'image re√ßue');
              return {
                success: true,
                imageUrl: imageData,
              };
            }
            // Si c'est du base64
            else if (imageData.startsWith('data:image/')) {
              debugLog('‚úÖ Image base64 avec pr√©fixe re√ßue');
              const imageUrl = imageData;
              return {
                success: true,
                imageUrl: imageUrl,
              };
            }
            // Si c'est du base64 sans pr√©fixe
            else {
              debugLog('‚úÖ Image base64 sans pr√©fixe re√ßue');
              const imageUrl = `data:image/png;base64,${imageData}`;
              return {
                success: true,
                imageUrl: imageUrl,
              };
            }
          }
        }
        
        debugLog('‚ùå Format de r√©ponse JSON non reconnu');
        return {
          success: false,
          error: 'Format de r√©ponse non reconnu',
        };
      }
    } catch (textError) {
      debugLog(`‚ö†Ô∏è Impossible de lire comme texte: ${textError}`);
    }
    
    // Si ce n'est pas du JSON, essayer comme blob d'image
    debugLog('üñºÔ∏è Traitement comme image binaire...');
    let imageBlob;
    try {
      imageBlob = await response.blob();
    } catch (blobError) {
      debugLog(`‚ùå Erreur lecture blob: ${blobError}`);
      throw new Error('Impossible de lire la r√©ponse du serveur');
    }
    
    debugLog(`üì¶ Blob re√ßu: ${imageBlob.size} bytes (${imageBlob.type})`);
    
    if (imageBlob.size === 0) {
      debugLog('‚ùå Image re√ßue vide');
      throw new Error('Image re√ßue vide');
    }
    
    // Create a URL for the received image blob
    const imageUrl = URL.createObjectURL(imageBlob);
    debugLog('‚úÖ URL de l\'image cr√©√©e');
    
    return {
      success: true,
      imageUrl: imageUrl,
    };
  } catch (error) {
    debugLog(`‚ùå Erreur finale: ${error instanceof Error ? error.message : error}`);
    
    let errorMessage = 'Erreur de traitement inconnue';
    
    if (error instanceof Error) {
      if (error.name === 'AbortError') {
        errorMessage = 'D√©lai d\'attente d√©pass√©. V√©rifiez votre connexion.';
      } else if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
        errorMessage = 'Probl√®me de connexion. V√©rifiez votre r√©seau.';
      } else if (error.message.includes('Load failed')) {
        errorMessage = 'Probl√®me de connexion r√©seau. V√©rifiez votre connexion internet.';
      } else if (error.message.includes('413') || error.message.includes('Request Entity Too Large')) {
        errorMessage = 'Image trop volumineuse pour le serveur. R√©duisez la taille de votre image.';
      } else {
        errorMessage = error.message;
      }
    }
    
    debugLog(`‚ùå Message final: ${errorMessage}`);
    
    return {
      success: false,
      error: errorMessage,
    };
  }
};

// Fonction pour g√©n√©rer un ID de session unique
const generateSessionId = (): string => {
  return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

const fileToBase64 = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    debugLog(`üîÑ Conversion ${file.name}: ${file.size} bytes`);
    
    if (!file) {
      debugLog('‚ùå Aucun fichier fourni');
      reject(new Error('Aucun fichier fourni'));
      return;
    }
    
    debugLog(`üìÅ Type: ${file.type}, Taille: ${(file.size/1024).toFixed(1)} KB`);
    
    const reader = new FileReader();
    
    reader.onload = () => {
      debugLog('‚úÖ FileReader onload');
      try {
        if (typeof reader.result === 'string') {
          // Remove the data:image/jpeg;base64, prefix
          const base64 = reader.result.split(',')[1];
          if (!base64 || base64.length === 0) {
            debugLog('‚ùå Base64 vide apr√®s split');
            reject(new Error('Conversion base64 √©chou√©e'));
            return;
          }
          debugLog(`‚úÖ Base64: ${base64.length} chars`);
          resolve(base64);
        } else {
          debugLog('‚ùå R√©sultat FileReader invalide');
          reject(new Error('Format de fichier non support√©'));
        }
      } catch (error) {
        debugLog(`‚ùå Erreur dans onload: ${error}`);
        reject(new Error('Erreur lors de la conversion'));
      }
    };
    
    reader.onerror = () => {
      debugLog('‚ùå FileReader onerror');
      reject(new Error('Impossible de lire le fichier'));
    };
    
    reader.onabort = () => {
      debugLog('‚ùå FileReader onabort');
      reject(new Error('Lecture du fichier interrompue'));
    };
    
    // Utiliser readAsDataURL avec gestion d'erreur
    try {
      debugLog('üöÄ Lecture fichier...');
      reader.readAsDataURL(file);
    } catch (error) {
      debugLog(`‚ùå Erreur d√©marrage readAsDataURL: ${error}`);
      reject(new Error('Impossible d\'initier la lecture du fichier'));
    }
  });
};

// Fonction de simulation pour contourner les probl√®mes r√©seau
const simulateProcessing = async (): Promise<WebhookResponse> => {
  debugLog('üé≠ Simulation du traitement pour test...');
  
  // Attendre un peu pour simuler le traitement
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // Cr√©er une image de test (pixel transparent)
  const canvas = document.createElement('canvas');
  canvas.width = 300;
  canvas.height = 400;
  const ctx = canvas.getContext('2d');
  
  if (ctx) {
    // Fond blanc
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, 300, 400);
    
    // Texte de test
    ctx.fillStyle = '#09B1BA';
    ctx.font = '20px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Image de Test', 150, 200);
    ctx.fillText('Webhook N8N', 150, 230);
    ctx.fillText('Non Disponible', 150, 260);
    
    // Convertir en blob puis en URL
    return new Promise((resolve) => {
      canvas.toBlob((blob) => {
        if (blob) {
          const imageUrl = URL.createObjectURL(blob);
          debugLog('‚úÖ Image de simulation cr√©√©e');
          resolve({
            success: true,
            imageUrl: imageUrl,
          });
        } else {
          resolve({
            success: false,
            error: 'Impossible de cr√©er l\'image de test',
          });
        }
      }, 'image/png');
    });
  }
  
  return {
    success: false,
    error: 'Impossible de cr√©er le canvas de test',
  };
};